?sim.fun
??sim.fun
f=function(n=10,mu=0,sigma=1){r=rnorm(n,mu,sigma);(mean(r)-m
u)/(sigma/sqrt(n)) }
f=function(n=10,mu=0,sigma=1){r=rnorm(n,mu,sigma);(mean(r)-mu)/(sigma/sqrt(n)) }
x = sim.fun(1000,f)
RSiteSearch(sim.fun)
RSiteSearch('sim.fun')
x = simulation(1000,f)
f
f(1000)
rm(f)
df <- read.table('clipboard',header=T)
df
df.t <- df[,4:6]
df.t
df.1 <- df[,1:3]
dff <- (df.1,df.t)
dff <- data.frame(df.1,df.t)
dff
dff <- rbind(df.1,df.t)
dff <- merge(df.1,df.t)
dff
df.1
df.t
colnames(df.t) <- c("id",'math','stat')
df.1
df.t
colnames(df.1) <- c("id",'math','stat')
df.1
dff <- merge(df.1,df.t)
dff
dff <- rbind(df.1,df.t)
dff
df <- dff
rm(df.1,df.t,dff)
df
stem(df$math)
plot(stem(df$math))
summary(df)
plot(df)
stem(df$stat)
EDA <- function (x)
{    par(mfrow=c(2,2))                            #  同时做4 个图（设置作     图窗口为2 行2 列格式）
hist(x);                                              #  直方图
dotchart(x);                                      #  点图
boxplot(x,horizontal=T);                  #  箱式图
qqnorm(x);qqline(x)                          #  正态概率图
par(mfrow=c(1,1))                            #  恢复成单图
}
EDA(df$math)
EDA(df$stat)
?dotchart
?par
x <- 1
x <- 2
x
rm(x)
x
x_stack
x_stack <- 2
rep(50,3)
rep(1:3,5,5,5)
rep(1:3,rep(5,3))
a=0.05
ua=qnorm（c（a/2,1-a/2））
ua=qnorm(c(a/2,1-a/2))
ua
plot(ua,dnorm(ua),xlim=c(-3,3),ylim=c(0,0.5),type="h")
x=seq(-3,3,0.1)
x
curve(dnorm(x),-3,3,add=T)
eda
EDA
EDA
EDA <- function(x){
par(mfrow = c(2, 2))
hist(x)
dotchart(x)
boxplot(x, h = T)
qqnorm(x); qqline(x)
par(mfrow = c(1, 1))
}
EDA
EDA(x)
EDA <- function(x){
par(mfrow = c(2, 2))
hist(x)
dotchart(x)
boxplot(x, horiaontal = T)
qqnorm(x); qqline(x)
par(mfrow = c(1, 1))
}
EDA(x)
EDA <- function(x){
EDA <- function(x){
par(mfrow = c(2, 2))
hist(x)
dotchart(x)
boxplot(x, horizontal = T)
qqnorm(x); qqline(x)
par(mfrow = c(1, 1))
}
EDA(x)
??display
aprops(display)
apropos(display)
df[,2:3]
?I
s <- c("1lll1l1l1l1ll1l111ll1l1ll1l1ll1ll111ll1ll1ll1l1ll1ll1ll1ll1lll1l1l1l1l1l1l1l1l1l1l1l1ll1lll1l111ll1l1l1l1l1")
length(which(s)=='l')
s=='l'
s <- 1lll1l1l1l1ll1l111ll1l1ll1l1ll1ll111ll1ll1ll1l1ll1ll1ll1ll1lll1l1l1l1l1l1l1l1l1l1l1l1ll1lll1l111ll1l1l1l1l1
s <- c(1lll1l1l1l1ll1l111ll1l1ll1l1ll1ll111ll1ll1ll1l1ll1ll1ll1ll1lll1l1l1l1l1l1l1l1l1l1l1l1ll1lll1l111ll1l1l1l1l1)
s
s[0]
s[1]
s[2]
?count
apropos(count)
prop.test(c(55,84),c(100,200),alternative='two.sided',correct=F)
prop.test(c(55,84),c(100,200),alternative='two.sided')
pt <- prop.test(c(55,84),c(100,200),alternative='two.sided',correct=F)
summary(pt)
pt
sqrt(4.531)
ME <- 1.97*sqrt(10/500+15/700)
(c(2-ME, 2+ME))
ME <- 1.97*sqrt(100/250+150/400)
(c(10-ME, 10+ME))
10/ME
20?ME
20/ME
10/sqrt(100/250+150/400)
prop.test(c(0.52*250,0.50*450),c(250,450),alternative='two.sided',correct=F)
10/sqrt(10/25+15/80)
prop.test(c(0.52*250,0.50*450),c(250,450))
ME <- 1.97*sqrt(100/250+150/400); (c(-10-ME, -10+ME))
ME <- 1.96*sqrt(100/250+150/400); (c(-10-ME, -10+ME))
X <- 1/sqrt(10/1000+15/800)
X
pt(X,lower.tail=F)
pt(X,df=900,lower.tail=F)
pt(X,df=900)*2
pt(X,df=900)
qt(X,lower.tail=F)
qt(X,900,lower.tail=F)
qt(X,900)
qt(X,df=900)
qt(0.025,df=450,lower.tail=F)
281+119
pt(2.61,200.9,lower.tail=F)
pt(2.61,200.9)
pt(2.61,200.09,lower.tail=F)
pt(2.61,200.09,lower.tail=F)*2
pt(X,900,lower.tail=F)*2
prop.test(c(.55*5,.42*8),c(5,8),alternative='two.sided',correct=F)
prop.test(c(.55*5,.42*8),c(5,8),alternative='two.sided')
prop.test(c(.55*5,.42*8),c(5,8))
ME <- 1.97*sqrt(10/50+15/70); (c(2-ME, 2+ME))
ME <- 1.96*sqrt(10/50+15/70); (c(2-ME, 2+ME))
ME <- 1.97*sqrt(10/500+15/700); (c(2-ME, 2+ME))
rm(list=ls(all=TRUE))
c <- c(110, 130, 200)
mean((155-c)^2)
sqrt(mean((155-c)^2))
((155-110)^2+(155-130)^2+(155-200)^2)/3
rm(list=ls(all=TRUE))
c <- c(45, 25, 56)
var(c)
sum((c-mean(c))^2)
mean((c-mean(c))^2)
fix(c)
rm(c)
binom.test(33, 110,alternative="two.sided")
binom.test(33, 110)
?test
?t
?t.test
t.test(18, 15)
t.test(18/33, 15/3)
t.test(18/33, 15/33)
binom.test(18,33)
binom.test(15,33)
Sw <- sqrt((57*0.2494*0.2494+51*0.2411*0.2411)/108)
Sw
T <- (1.263 - 1.087)/Sw/sqrt(1/57+1/52)
T
qt(108)
?qt
qt(T, 108, lower.tail = F)
qt(T, 108, lower.tail = FALSE)
pt(T, 108, lower.tail = FALSE)
pt(T, 108)
list(sex,edu)
sex <- c("male","female")
edu <- c("high","moderate","low")
list(sex,edu)
dim(list(sex,edu))
length(list(sex,edu))
class(list(sex,edu))
table(sex,edu)
?bartlett
?bartlett.test
rm(list=ls(all=TRUE))
?make.t
search()
.GlobalEnv
Autoloads
help.search
help.search()
?help.search
objects()
var
var()
1i
0i
1+i
1+0i
(1+0i)*0i
(1+0i)*1i
1i^2
sqrt(-1+0i)
n  <-  10，1:n-1，1:(n-1)
n  <-  10;n
n  <-  1:n-1;n
n  <-  1:(n-1);n
n <- 10
n  <-  1:(n-1);n
n
z <- array()
dim(z) <- c(2,3,4)
?array
z <- array(dim=c(2,3,4))
dim(z)
n
rm(n)
rm(z)
outer(0:9)
outer(0:9,0:9)
outer(1:9,1:9)
outer(0:9,0:9)
table(outer(d,  d,  "-"))
outer(1:9,1:9)->d
table(outer(d,  d,  "-"))
dim( table(outer(d,  d,  "-")))
fr <-  table(outer(d,  d,  "-"))
class(fr)
mode(fr)
?func
?function
()
??func
rm(d)
rm(fr)
search()
ls(tools:rstudio)
attach(faithful)
summary(eruption)
summary(eruptions)
search()
str(faithful)
object(faithful)
attributes(faithful)
hist(eruptions)
hist(eruptions,  seq(1.6,  5.2,  0.2),  prob=TRUE)
lines(density(eruptions,  bw=0.1))
rug(eruptions)
plot(ecdf(eruptions),  do.points=FALSE,  verticals=TRUE)
lines(density(eruptions,  bw="SJ"))
long  <-  eruptions[eruptions  >  3]
plot(ecdf(long),  do.points=FALSE,  verticals=TRUE)
x  <-  seq(3,  5.4,  0.01)
lines(x,  pnorm(x,  mean=mean(long),  sd=sqrt(var(long))),  lty=3)
par(pty="s")
qqnorm(long);  qqline(long)
x  <-  rt(250,  df  =  5)
qqnorm(x);  qqline(x)
qqplot(qt(ppoints(250),  df  =  5),  x,  xlab  =  "Q-Q  plot  for  t  dsn")
qqline(x)
>  shapiro.test(long)
shapiro.test(long)
deattch()
dettach()
detach()
search()
rm(long, x)
q()
cat(paste(date(),"\nAdios\n"))
?cat
methods(plot)
plot
kalythos  <-  data.frame(x  =  c(20,35,45,55,70),  n  =  rep(50,5),
y  =  c(6,17,26,37,44))
View(kalythos)
kalythos$Ymat  <-  cbind(kalythos$y,  kalythos$n  -  kalythos$y)
View(kalythos)
fmp  <-  glm(Ymat  ~  x,  family  =  binomial(link=probit),  data  =  kalythos)
fml  <-  glm(Ymat  ~  x,  family  =  binomial,  data  =  kalythos)
summary(fmp)
summary(fml)
plot(fmp)
plot(fml)
rm(list=ls(all=TRUE))
q()
par()
help(Devices)
q()
x  <-  1:20
w  <-  1  +  sqrt(x)/2
dummy  <-  data.frame(x=x,  y=  x  +  rnorm(x)*w)
dummy
fm  <-  lm(y  ~  x,  data=dummy)
summary(fm)
fm1  <-  lm(y  ~  x,  data=dummy,  weight=1/w^2)
summary(fm1)
attach(dummy)
lrf  <-  lowess(x,  y)
plot(x,  y)
lines(x,  lrf$y)
abline(0,  1,  lty=3)
abline(coef(fm))
abline(coef(fm1),  col  =  "red")
detach()
plot(fitted(fm),  resid(fm),
xlab="Fitted  values",
ylab="Residuals",
main="Residuals  vs  Fitted")
qqnorm(resid(fm),  main="Residuals  Rankit  Plot")
rm(fm,  fm1,  lrf,  x,  dummy)
rm(w)
filepath  <-  system.file("data",  "morley.tab"  ,  package="datasets")
filepath
file.show(filepath)
mm  <-  read.table(filepath)
mm
mm$Expt  <-  factor(mm$Expt)
mm$Run  <-  factor(mm$Run)
attach(mm)
plot(Expt,  Speed,  main="Speed  of  Light  Data",  xlab="Experiment  No.")
fm  <-  aov(Speed  ~  Run  +  Expt,  data=mm)
summary(fm)
fm0  <-  update(fm,  .  ~  .  -  Run)
anova(fm0,  fm)
detach()
rm(fm,  fm0)
rm(mm, filepath)
x  <-  seq(-pi,  pi,  len=50)
y  <-  x
f  <-  outer(x,  y,  function(x,  y)  cos(y)/(1  +  x^2))
oldpar  <-  par(no.readonly  =  TRUE)
par(pty="s")
contour(x,  y,  f)
contour(x,  y,  f,  nlevels=15,  add=TRUE)
fa  <-  (f-t(f))/2
contour(x,  y,  fa,  nlevels=15)
par(oldpar)
image(x,  y,  f)
image(x,  y,  fa)
objects();  rm(x,  y,  f,  fa)
objects()
rm(list=ls(all=TRUE))
rm. <- function(x){  # clean workspace
rm(list=ls(all=TRUE))
}
rm.()
x <- 2
rm.()
rm.
rm. <- function(x) rm(list=ls(all=TRUE)) # clean workspace
rm.
rm.()
rmm <- function(x) rm(list=ls(all=TRUE)) # clean workspace
rmm()
rm(list=ls(all=TRUE))
th  <-  seq(-pi,  pi,  len=100)
z  <-  exp(1i*th)
par(pty="s")
plot(z,  type="l")
w  <-  rnorm(100)  +  rnorm(100)*1i
w  <-  ifelse(Mod(w)  >  1,  1/w,  w)
plot(w,  xlim=c(-1,1),  ylim=c(-1,1),  pch="+",xlab="x",  ylab="y")
lines(z)
w  <-  sqrt(runif(100))*exp(2*pi*runif(100)*1i)
plot(w,  xlim=c(-1,1),  ylim=c(-1,1),  pch="+",  xlab="x",  ylab="y")
lines(z)
rm(list=ls(all=TRUE))
q()
?I
?hockey
?prune
install.packages("devtools")
library(devtools)
install_github("bgiR","gangchen")
q()
database=(rnomr(100))
database=(rnorm(100))
x=199
x <- 100
y <- 100
pchs <- rep(2:100)
pchs[x>0] <- 20
plot(x,y,pch=pchs,main='散点图',col=rainbows(100))
plot(x,y,pch=pchs,main='散点图',col=rainbow(100))
plot(x,y,pch=pchs,main='散点图',col=rainbow(100),data=database)
?plot
plot(database,pch=pchs,main='散点图',col=rainbow(100))
x <- rnorm(100)
y <- rnorm(100)
plot(x,y,pch=pchs,main='散点图',col=rainbow(100),xlab="X",ylab="Y",cex=3,cex.axis=2)
plot(x,y,pch=pchs,main='散点图',col=topo.colors(100),xlab="X",ylab="Y",cex=3,cex.axis=2)
pchs
pchs[x>0] <- 2
pchs
plot(x,y,pch=pchs,main='散点图',col=topo.colors(100),xlab="X",ylab="Y",cex=3,cex.axis=2)
pchs <- rep(2:20)
pchs
pchs <- rep(2,20)
pchs
pchs <- rep(2:20)
plot(x,y,pch=pchs,main='散点图',col=topo.colors(100),xlab="X",ylab="Y",cex=3,cex.axis=2)
pchs <- rep(2:100)
plot(x,y,pch=pchs,main='散点图',col=topo.colors(100),xlab="X",ylab="Y",cex=3,cex.axis=2)
pchs <- rep(1:25,4)
pchs <- seq(1:25,4)
pchs <- seq(1:25,100)
pchs <- seq(1,25,100)
pchs
pchs <- seq(1:25,100)
pchs <- rep(1:25,4)
pchs
plot(x,y,pch=pchs,main='散点图',col=topo.colors(100),xlab="X",ylab="Y",cex=3,cex.axis=2)
dotchart(x)
barplot(x,col=c('red','green'))
barplot(x[1:20],col=c('red','green'))
barplot(abs(x[1:20]),col=c('red','green'))
barplot(abs(x[1:20]),col=c('red','green'),width=5,space=5,xlim=c(0,100))
barplot(abs(x[1:20]),col=c('red','green'),width=5,xlim=c(0,100))
barplot(abs(x[1:20]),col=c('red','green'),width=2,xlim=c(0,100))
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=5,xlim=c(0,100))
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=1,xlim=c(0,100))
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=2,xlim=c(0,100))
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=1,xlim=c(0,100))
?barplot
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=1,xlim=c(0,100),border='blue')
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=0.2,xlim=c(0,100),border='blue')
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=0.2,xlim=c(0,100),border='blue',horiz=T)
barplot(abs(x[1:20]),col=c('red','green'),width=4,space=0.2,xlim=c(0,100),border='blue')
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
install.packages(c("ads", "car", "foreign", "formatR", "labeling", "markdown", "mgcv", "RNetLogo", "spatstat", "zoo"))
hist(rnorm(10000),col='lightblue')
hist(rnorm(10000),col='lightblue',breaks=100)
hist(rnorm(10000),col='lightblue',breaks=10000)
hist(rnorm(10000),col='lightblue',breaks=20,col=rainbow(20))
hist(rnorm(10000),,breaks=20,col=rainbow(20))
hist(rnorm(10000),breaks=20,col=rainbow(20))
hist(rnorm(10000),breaks=10,col=rainbow(10))
?hist
hist(rnorm(30),breaks=100)
hist(rnorm(3000),breaks=100)
hist(rnorm(30000),breaks=100)
den = density(x)
class(x)
class(den)
plot(den)
rug(x)
?rug
data(exprData)
library(bgiR)
data(exprData)
boxplot(exprData[,1:20])
boxplot(exprData[,1:20],col=rainbow(20))
?unlibrary
detach(bgiR)
detach("bgiR")
rm(list=ls(all=TRUE))
data(bgiCities)
cities
library(map)
library(maps)
install.packages("maps")
dgiMap(Cities)
bgiMap(Cities)
bgiMap()
install.packages(mapdata)
bgiMap
q()
q()
